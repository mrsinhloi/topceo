package com.topceo.groupimport android.Manifestimport android.app.Activityimport android.content.*import android.graphics.*import android.graphics.drawable.BitmapDrawableimport android.graphics.drawable.Drawableimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.os.Handlerimport android.text.TextUtilsimport android.view.Menuimport android.view.MenuItemimport android.view.Viewimport androidx.activity.result.ActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.annotation.ColorIntimport androidx.annotation.NonNullimport androidx.appcompat.app.AppCompatActivityimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.DefaultItemAnimatorimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.androidnetworking.error.ANErrorimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.DiskCacheStrategyimport com.bumptech.glide.load.resource.bitmap.CenterCropimport com.bumptech.glide.load.resource.bitmap.RoundedCornersimport com.topceo.Rimport com.topceo.config.MyApplicationimport com.topceo.db.TinyDBimport com.topceo.fragments.Fragment_1_Home_SonTungimport com.topceo.group.adapters.MemberPreviewAdapterimport com.topceo.group.members.ApproveMemberActivityimport com.topceo.group.members.ApprovePostActivityimport com.topceo.group.members.InviteMemberActivityimport com.topceo.group.members.MemberGroupActivityimport com.topceo.group.models.GroupInfoimport com.topceo.group.models.GroupMemberimport com.topceo.objects.image.ImageItemimport com.topceo.objects.image.Itemimport com.topceo.objects.other.Userimport com.topceo.post.PostLikeFacebookActivityimport com.topceo.post.UploadImageListenerimport com.topceo.services.ReturnResultimport com.topceo.services.Webservicesimport com.topceo.utils.EndlessRecyclerOnScrollListenerimport com.topceo.utils.MyUtilsimport com.topceo.adapter.FeedAdapterimport com.google.android.material.dialog.MaterialAlertDialogBuilderimport com.google.android.material.textfield.TextInputEditTextimport com.google.gson.JsonObjectimport com.google.gson.reflect.TypeTokenimport com.permissionx.guolindev.PermissionXimport gun0912.tedimagepicker.builder.TedImagePickerimport gun0912.tedimagepicker.builder.type.MediaTypeimport kotlinx.android.synthetic.main.activity_all_group.toolbarimport kotlinx.android.synthetic.main.activity_group_detail.*import kotlinx.android.synthetic.main.content_scrolling.*import kotlinx.android.synthetic.main.layout_add_post.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass GroupDetailActivity : AppCompatActivity() {    companion object {        const val ACTION_DELETE_POST_IN_GROUP = "ACTION_DELETE_POST_IN_GROUP"        const val ACTION_REFRESH_DETAIL_GROUP = "ACTION_REFRESH_DETAIL_GROUP"        const val IS_NEED_INVITE_USER = "IS_NEED_INVITE_USER"        const val NEED_INVITE_USER_CODE: Int = 10        fun openActivity(context: Context, info: GroupInfo) {            val intent = Intent(context, GroupDetailActivity::class.java)            intent.putExtra(GroupInfo.GROUP_INFO, info)            context.startActivity(intent)        }        fun openActivity(context: Context, groupId: Long, isNeedInviteUser: Boolean = false) {            val intent = Intent(context, GroupDetailActivity::class.java)            intent.putExtra(GroupInfo.GROUP_ID, groupId)            intent.putExtra(IS_NEED_INVITE_USER, isNeedInviteUser)            context.startActivity(intent)        }        //save va restore trong InviteMemberAdapter, khi logout thi clear trong whenLogout() in MyApplication        var mapInvited: HashMap<Long, ArrayList<Long>> = HashMap<Long, ArrayList<Long>>()    }    var imgHeight = 0    private var screentWidth: Int = 0    lateinit var context: Context    lateinit var user: User    lateinit var db: TinyDB    var groupId: Long = 0    var groupInfo: GroupInfo? = null    var isOwner: Boolean = false    fun setColorFilter(@NonNull drawable: Drawable, @ColorInt color: Int) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            drawable.colorFilter = BlendModeColorFilter(color, BlendMode.SRC_ATOP)        } else {            drawable.setColorFilter(color, PorterDuff.Mode.SRC_ATOP)        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_group_detail)        setSupportActionBar(findViewById(R.id.toolbar))        toolbar.setNavigationOnClickListener { finish() }        /*findViewById<FloatingActionButton>(R.id.fab).setOnClickListener { view ->            Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)                    .setAction("Action", null).show()        }*/        context = this        //change color icon when expand        backIcon = toolbar.navigationIcon        setIconColor(ContextCompat.getColor(context, R.color.sky_end))        /*app_bar.addOnOffsetChangedListener(object : AppBarLayout.OnOffsetChangedListener {            override fun onOffsetChanged(appBarLayout: AppBarLayout?, verticalOffset: Int) {                if ((toolbar_layout.height + verticalOffset) < (2 * ViewCompat.getMinimumHeight(toolbar_layout))) {                    setIconColor(ContextCompat.getColor(context, R.color.white))                } else {                    setIconColor(iconColor)                }            }        })*/        db = TinyDB(this)        screentWidth = MyUtils.getScreenWidth(this);//getScreenWidth(this)        var minHeight = db.getInt(GroupInfo.COVER_MIN_HEIGHT)        if (minHeight <= 0) {            minHeight = screentWidth / 3        } else {            imgHeight = minHeight        }        toolbarImage.minimumHeight = minHeight        user = db.getObject(User.USER, User::class.java) as User        groupInfo = intent.getParcelableExtra(GroupInfo.GROUP_INFO)        if (groupInfo != null) {            groupId = groupInfo!!.groupId            isOwner = user.userId == groupInfo?.createUserId            setUI()            //lay lai vi quyen co the da thay doi, so member co the thay doi            getGroupInfo(groupId, false)        } else {            groupId = intent.getLongExtra(GroupInfo.GROUP_ID, 0)            if (groupId > 0) {                getGroupInfo(groupId, true)            }        }        val isNeedInviteUser = intent.getBooleanExtra(IS_NEED_INVITE_USER, false)        if (isNeedInviteUser) {            //hien thi moi thanh vien//            val intent = Intent(context, InviteMemberActivity::class.java)//            intent.putExtra(GroupInfo.GROUP_ID, groupId)            val intent = Intent(context, InviteMemberActivity::class.java).apply {                putExtra(GroupInfo.GROUP_ID, groupId)                setResult(NEED_INVITE_USER_CODE, intent)            }            val startForResult =                registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result: ActivityResult ->                    when (result.resultCode) {                        Activity.RESULT_OK -> {                            getGroupInfo(groupId, true)                        }                    }                }            startForResult.launch(intent)        }        initReceiver()        refreshLayout.setOnRefreshListener {            getGroupInfo(groupId, true)        }    }    var iconColor: Int = Color.WHITE    fun setUI() {        if (groupInfo != null) {            //header//            findViewById<CollapsingToolbarLayout>(R.id.toolbar_layout).title = groupInfo?.groupName//            findViewById<CollapsingToolbarLayout>(R.id.toolbar_layout).title = " "            //hinh width = widthScreen, height = 1/2 width            loadCover(groupInfo?.coverUrl)            //info            txtName.text = groupInfo?.groupName            //about            if (groupInfo?.description != null && groupInfo?.description!!.isNotEmpty()) {                txtAbout.text = groupInfo?.description                linearAbout.visibility = View.VISIBLE            } else {                linearAbout.visibility = View.GONE            }            //UI thay doi theo quyen            whenGroupInfoChange()            //load list post            loadPostList()            btnInvite.setOnClickListener {                InviteMemberActivity.openActivity(context, groupInfo!!.groupId)            }            /**             * "Đã join group hay chưa: Client dựa vào trạng thái tương ứng để show button và gọi API            1: Đã join            0: Chưa join            -1: đã gửi yêu cầu join nhưng chưa đc duyệt (Client hiển thị nút Cancel để huỷ yêu cầu tham gia tương ứng với client gọi API: /group/memberRequest/cancel)            -2: đã đc mời tham gia nhưng chưa đồng ý (Client hiển thị nút đồng ý hoặc từ chối tương ứng gọi API: /group/member/accept và /group/member/refuse)"             */            //khac 1 la chua join            if (groupInfo!!.isJoin == GroupInfo.JOINNED) {//da join                linearInvite.visibility = View.GONE                linearMembers.visibility = View.VISIBLE                //load member                loadMemberList()            } else {                //an members                linearMembers.visibility = View.GONE                linearInvite.visibility = View.VISIBLE                when (groupInfo!!.isJoin) {                    GroupInfo.UN_JOINNED -> {                        //thi hien nut Join                        btnDecline.visibility = View.GONE                        btnAccept.visibility = View.VISIBLE                        btnAccept.text = getText(R.string.join)                        btnAccept.setOnClickListener { whenRequestJoin() }                    }                    GroupInfo.REQUESTED_JOIN -> {                        //hien thi nut cancel join                        btnAccept.visibility = View.GONE                        btnDecline.visibility = View.VISIBLE                        btnDecline.text = getText(R.string.cancel)                        btnDecline.setOnClickListener { whenCancleJoin() }                    }                    else -> {//GroupInfo.INVITED_AND_WAITING_ACCEPT                        //hien thi ca 2 nut accept/decline                        btnDecline.visibility = View.VISIBLE                        btnAccept.visibility = View.VISIBLE                        btnAccept.setOnClickListener { whenAccept() }                        btnDecline.setOnClickListener { whenDecline() }                    }                }            }        }    }    /**     * - So thanh vien     * - Duoc phep post bai ko     * - Duoc phep chinh sua thong tin ko     */    fun whenGroupInfoChange() {        if (groupInfo != null) {            //set so member            setNumberMembers()            initUIAddPost()            //chinh sua thong tin group            if (isAdmin || isOwner) {                relativeTitle.setOnClickListener {                    if (groupInfo != null) {                        CreateGroupActivity.openActivityEditGroup(context, groupInfo!!)                    }                }            } else {                relativeTitle.setOnClickListener(null)            }        }    }    fun setNumberMembers() {        if (groupInfo != null) {            if (groupInfo!!.isPrivate) {                txtGroupMember.text =                    getString(R.string.group_public_x_members, groupInfo?.totalMember)            } else {                txtGroupMember.text =                    getString(R.string.group_private_x_members, groupInfo?.totalMember)            }        }    }    val PREVIEW_SIZE: Int = 7    lateinit var previewAdapter: MemberPreviewAdapter    fun loadMemberList() {        ////rv        val layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)        rvMember.layoutManager = layoutManager        rvMember.itemAnimator = DefaultItemAnimator()        previewAdapter =            MemberPreviewAdapter(this, ArrayList<GroupMember>(), object : View.OnClickListener {                override fun onClick(v: View?) {                    groupInfo?.let {                        it.isAdmin = isAdmin                        it.isMod = isMod                        MemberGroupActivity.openActivity(rvMember.context, it)                    }                }            })        rvMember.adapter = previewAdapter        getAdmin()    }    private fun getAdmin() {        if (MyUtils.checkInternetConnection(this)) {            if (groupInfo != null) {                MyApplication.apiManager.getAdminsGroup(groupInfo!!.groupId,                    object : Callback<JsonObject?> {                        override fun onResponse(                            call: Call<JsonObject?>,                            response: Response<JsonObject?>                        ) {                            val data = response.body()                            if (data != null) {                                val collectionType =                                    object : TypeToken<ArrayList<GroupMember>>() {}.type                                val result =                                    Webservices.parseJson(data.toString(), collectionType, true)                                if (result != null) {                                    if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao                                        var list = result.data as ArrayList<GroupMember>                                        if (list.size > 0) {                                            if (list.size < PREVIEW_SIZE) {                                                getMembers(list)                                            } else {                                                rvMember.post {                                                    previewAdapter.update(list)                                                }                                            }                                            checkAdmin(list)                                        } else {                                            getMembers(list)                                        }                                    }                                }                            }                        }                        override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                            MyUtils.log("error")                        }                    })            }        }    }    var isAdmin: Boolean = false    var isMod: Boolean = false    private fun checkAdmin(list: java.util.ArrayList<GroupMember>) {        for (item in list) {            if (item.userId == user.userId) {                isAdmin = item.roleId == GroupMember.ROLE_ADMIN                isMod = item.roleId == GroupMember.ROLE_MOD                break            }        }        Handler().postDelayed(Runnable { onPrepareOptionsMenu(mMenu) }, 1500)    }    fun getMembers(members: ArrayList<GroupMember>) {        MyApplication.apiManager.getMembersGroup(groupInfo!!.groupId,            1,            PREVIEW_SIZE - members.size,            object : Callback<JsonObject?> {                override fun onResponse(call: Call<JsonObject?>, response: Response<JsonObject?>) {                    val data = response.body()                    if (data != null) {                        val collectionType = object : TypeToken<ArrayList<GroupMember>>() {}.type                        val result = Webservices.parseJson(data.toString(), collectionType, true)                        if (result != null) {                            if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao                                var list = result.data as ArrayList<GroupMember>                                if (list.size > 0) {                                    members.addAll(list)                                }                                rvMember.post {                                    previewAdapter.update(members)                                }                            }                        }                    }                }                override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                    MyUtils.log("error")                }            })    }    fun loadPostList() {        val layoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)        rvFeed.layoutManager = layoutManager//        rvFeed.itemAnimator = DefaultItemAnimator()        rvFeed.addOnScrollListener(object : EndlessRecyclerOnScrollListener() {            override fun onLoadMore() {                loadMore()            }            private var oldPosition = -1            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {                super.onScrolled(recyclerView, dx, dy)            }        })        // specify an adapter (see also next example)        // specify an adapter (see also next example)        val db = TinyDB(this)        var owner: User = db.getObject(User.USER, User::class.java) as User        mAdapter = FeedAdapter(this, false, owner)        rvFeed.setAdapter(mAdapter)        getFeedGroup(0)    }    lateinit var mAdapter: FeedAdapter    private val isNeedLoadMore = true    fun getFeedGroup(lastItemId: Long) {        if (isNeedLoadMore) {            Webservices.getFeedGroup(groupInfo!!.groupId, lastItemId).continueWith<Void> { task ->                if (task.error == null) {                    if (task.result != null) {                        val list = task.result as java.util.ArrayList<ImageItem>                        if (list.size > 0) {                            if (lastItemId == 0L) {                                mAdapter.update(list)                            } else {                                mAdapter.addAll(list)                            }                        }                    }                } else {                    val error = task.error as ANError                    //recall service                    val isLostCookie = MyApplication.controlException(error)                    if (isLostCookie) {                        MyApplication.initCookie(this).continueWith<Void> { task ->                            if (task.result != null) {                                val kq = task.result as User                                if (kq != null) {                                    getFeedGroup(0)                                }                            }                            null                        }                    } else {                        if (!TextUtils.isEmpty(error.message)) {                            MyUtils.showToastDebug(this, error.message)                        }                    }                }                null            }        }    }    fun getGroupInfo(groupId: Long, isNeedSetUI: Boolean) {        if (groupId > 0) {            MyApplication.apiManager.groupInfo(groupId,                object : Callback<JsonObject?> {                    override fun onResponse(                        call: Call<JsonObject?>,                        response: Response<JsonObject?>                    ) {                        refreshLayout.isRefreshing = false                        val data = response.body()                        if (data != null) {                            val result =                                Webservices.parseJson(data.toString(), GroupInfo::class.java, false)                            if (result != null) {                                if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao                                    var group = result.data as GroupInfo                                    groupInfo = group                                    isOwner = user.userId == groupInfo?.createUserId                                    onPrepareOptionsMenu(mMenu)                                    if (isNeedSetUI) {                                        setUI()                                    } else {                                        whenGroupInfoChange()                                    }                                    //bao lai danh sach all so member                                    //doi hinh trong danh sach tat ca nhom                                    val intent = Intent(AllGroupActivity.ACTION_REPLACE_GROUP)                                    intent.putExtra(GroupInfo.GROUP_INFO, groupInfo)                                    sendBroadcast(intent)                                }                            }                        }                    }                    override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                        MyUtils.log("error")                        refreshLayout.isRefreshing = false                    }                })        } else {            refreshLayout.isRefreshing = false        }    }    val ACTION_POST_FEED: Int = 111    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (resultCode == RESULT_OK) {            if (requestCode == ACTION_POST_FEED) {                getFeedGroup(0)            }        }    }    fun loadMore() {        if (mAdapter != null) {            val lastestItem: ImageItem? = mAdapter.getLastestItem()            if (lastestItem != null) {                getFeedGroup(lastestItem?.imageItemId ?: 0)            }        }    }    fun whenAccept() {        if (MyUtils.checkInternetConnection(this)) {            MyApplication.apiManager.groupMemberAccept(groupId,                object : Callback<JsonObject?> {                    override fun onResponse(                        call: Call<JsonObject?>,                        response: Response<JsonObject?>                    ) {                        val data = response.body()                        if (data != null) {                            val result =                                Webservices.parseJson(data.toString(), Boolean::class.java, false)                            if (result != null) {                                if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao//                                        MyUtils.showAlertDialog(this@GroupDetailActivity, "OK")                                    //khi dong y thi hien thi danh sach member                                    linearInvite.visibility = View.GONE                                    linearMembers.visibility = View.VISIBLE                                    //load member                                    loadMemberList()                                    //load lai danh sach group                                    sendBroadcast(Intent(Fragment_1_Home_SonTung.ACTION_REFRESH_GROUP))                                    //all group list                                    val allGroup = Intent(AllGroupActivity.ACTION_JOIN_GROUP)                                    allGroup.putExtra(GroupInfo.GROUP_ID, groupId)                                    sendBroadcast(allGroup)                                }                            }                        }                    }                    override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                        MyUtils.log("error")                    }                })        } else {            MyUtils.showThongBao(this)        }    }    fun whenDecline() {        if (MyUtils.checkInternetConnection(this)) {            MyApplication.apiManager.groupMemberRefuse(groupId,                object : Callback<JsonObject?> {                    override fun onResponse(                        call: Call<JsonObject?>,                        response: Response<JsonObject?>                    ) {                        val data = response.body()                        if (data != null) {                            val result =                                Webservices.parseJson(data.toString(), Boolean::class.java, false)                            if (result != null) {                                if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao//                                        MyUtils.showAlertDialog(this@GroupDetailActivity, "OK")                                    //khi tu choi thi load lai group                                    getGroupInfo(groupId, true)                                }                            }                        }                    }                    override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                        MyUtils.log("error")                    }                })        } else {            MyUtils.showThongBao(this)        }    }    fun whenRequestJoin() {        if (MyUtils.checkInternetConnection(this)) {            MyApplication.apiManager.groupRequestJoin(groupId,                object : Callback<JsonObject?> {                    override fun onResponse(                        call: Call<JsonObject?>,                        response: Response<JsonObject?>                    ) {                        val data = response.body()                        if (data != null) {                            val result =                                Webservices.parseJson(data.toString(), Boolean::class.java, false)                            if (result != null) {                                if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao//                                        MyUtils.showAlertDialog(this@GroupDetailActivity, "OK")                                    //khi nhan join xong thi load lai group                                    getGroupInfo(groupId, true)                                    //load lai danh sach group                                    sendBroadcast(Intent(Fragment_1_Home_SonTung.ACTION_REFRESH_GROUP))                                    //all group list                                    val allGroup = Intent(AllGroupActivity.ACTION_JOIN_GROUP)                                    allGroup.putExtra(GroupInfo.GROUP_ID, groupId)                                    sendBroadcast(allGroup)                                }                            }                        }                    }                    override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                        MyUtils.log("error")                    }                })        } else {            MyUtils.showThongBao(this)        }    }    fun whenCancleJoin() {        if (MyUtils.checkInternetConnection(this)) {            MyApplication.apiManager.groupCancleJoin(groupId,                object : Callback<JsonObject?> {                    override fun onResponse(                        call: Call<JsonObject?>,                        response: Response<JsonObject?>                    ) {                        val data = response.body()                        if (data != null) {                            val result =                                Webservices.parseJson(data.toString(), Boolean::class.java, false)                            if (result != null) {                                if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao//                                        MyUtils.showAlertDialog(this@GroupDetailActivity, "OK")                                    //khi nhan cancel thi load lai group                                    getGroupInfo(groupId, true)                                }                            }                        }                    }                    override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                        MyUtils.log("error")                    }                })        } else {            MyUtils.showThongBao(this)        }    }    var backIcon: Drawable? = null    var drawbleStackOverflow: Drawable? = null    var mMenu: Menu? = null    override fun onCreateOptionsMenu(menu: Menu): Boolean {        menuInflater.inflate(R.menu.menu_group_detail, menu)        mMenu = menu        val item = menu.findItem(R.id.overflowMenu)        drawbleStackOverflow = item.icon        setIconColor(ContextCompat.getColor(context, R.color.sky_end))        return super.onCreateOptionsMenu(menu)    }    override fun onPrepareOptionsMenu(menu: Menu?): Boolean {        if (menu != null) {            //admin system hoac owner thi dc chỉnh banner hoac xoa group            if (isAdmin || isMod || isOwner) {                //#1                //Owner, SystemAdmin	Đc xoá nhóm                if (isAdmin || isOwner) {                    menu.findItem(R.id.action_4)?.isVisible = true                }                //#2                //Cập nhật thông tin, setting của Group                //Tất cả các quyền quản lý member                //Tất cả các quyền về Post                if (isAdmin) {                    //hien action 1 len cho phep chinh banner                    menu.findItem(R.id.action_1)?.isVisible = true                    //duyet tin                    menu.findItem(R.id.action_5)?.isVisible = true                    //duyet nguoi                    menu.findItem(R.id.action_6)?.isVisible = true                } else if (isMod) {                    //duyet tin                    menu.findItem(R.id.action_5)?.isVisible = true                    //duyet nguoi                    menu.findItem(R.id.action_6)?.isVisible = true                }            } else {                //todo la member thi kiem tra setting co cho member duyet ko                if (groupInfo != null) {                    if (groupInfo!!.isJoin == GroupInfo.JOINNED) {//la member                        if (groupInfo?.memberApprove == GroupInfo.MEMBER_APPROVE_EVERYONE) {                            //duyet nguoi                            menu.findItem(R.id.action_6)?.isVisible = true                        }                    }                }            }            return super.onPrepareOptionsMenu(menu)        }        return false    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        when (item.itemId) {            R.id.action_1 -> {                initSelectImage()//                MyUtils.showToast(this, "developing...")            }            R.id.action_2 -> {                MaterialAlertDialogBuilder(context)                    .setMessage(R.string.confirm_leave_group)                    .setNegativeButton(R.string.cancel, null)                    .setPositiveButton(                        R.string.ok,                        DialogInterface.OnClickListener { dialog, which ->                            groupLeave()                            dialog.dismiss()                        })                    .show()            }            R.id.action_3 -> {//                MyUtils.showToast(this, "developing...")                /*if (bottomSheet.state == BottomSheetBehavior.STATE_EXPANDED) {                    bottomSheet.state = BottomSheetBehavior.STATE_COLLAPSED                } else {                    bottomSheet.state = BottomSheetBehavior.STATE_EXPANDED                }*/                if (groupInfo != null) {                    groupInfo?.isAdmin = isAdmin                    groupInfo?.isMod = isMod                    SettingGroupActivity.openActivity(context, groupInfo!!)                }            }            R.id.action_4 -> {                //confirm password and delete group                var password: String = ""                var dialog = MaterialAlertDialogBuilder(context)                    .setView(R.layout.layout_input_password_confirm)                    .setTitle(R.string.delete_group)                    .setPositiveButton(R.string.delete, object : DialogInterface.OnClickListener {                        override fun onClick(dialog: DialogInterface?, which: Int) {                            dialog?.dismiss()                            if (input != null) {                                val password: String = input?.text.toString()                                groupDelete(password)                            }                        }                    })                    .setNegativeButton(R.string.cancel, null)                    .show()                input =                    dialog.findViewById<TextInputEditText>(R.id.input_password) as TextInputEditText            }            R.id.action_5 -> {//duyet tin                ApprovePostActivity.openActivity(context, groupId)            }            R.id.action_6 -> {//duyet user                ApproveMemberActivity.openActivity(context, groupId)            }        }        return super.onOptionsItemSelected(item)    }    var input: TextInputEditText? = null    fun groupLeave() {        if (MyUtils.checkInternetConnection(this)) {            MyApplication.apiManager.groupLeave(groupId,                object : Callback<JsonObject?> {                    override fun onResponse(                        call: Call<JsonObject?>,                        response: Response<JsonObject?>                    ) {                        val data = response.body()                        if (data != null) {                            val result =                                Webservices.parseJson(data.toString(), Boolean::class.java, false)                            if (result != null) {                                if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao                                    //remove khoi danh sach all                                    //xoa o danh sach all + search                                    val allGroup = Intent(AllGroupActivity.ACTION_DELETE_GROUP)                                    allGroup.putExtra(GroupInfo.GROUP_ID, groupId)                                    sendBroadcast(allGroup)                                    //load lai danh sach group                                    sendBroadcast(Intent(Fragment_1_Home_SonTung.ACTION_REFRESH_GROUP))                                    finish()                                }                            }                        }                    }                    override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                        MyUtils.log("error")                    }                })        } else {            MyUtils.showThongBao(this)        }    }    //////////////////////////////////////////////////////////////////////////////////////////////    fun groupDelete(password: String) {        if (password.isNotEmpty()) {            if (MyUtils.checkInternetConnection(this)) {                MyApplication.apiManager.groupDelete(groupId, password,                    object : Callback<JsonObject?> {                        override fun onResponse(                            call: Call<JsonObject?>,                            response: Response<JsonObject?>                        ) {                            val data = response.body()                            if (data != null) {                                val result = Webservices.parseJson(                                    data.toString(),                                    GroupInfo::class.java,                                    false                                )                                if (result != null) {                                    if (result.errorCode == ReturnResult.SUCCESS) { //da ton tai thi vao                                        MyUtils.showToast(context, R.string.delete_success)                                        //xoa o danh sach all + search                                        val allGroup = Intent(AllGroupActivity.ACTION_DELETE_GROUP)                                        allGroup.putExtra(GroupInfo.GROUP_ID, groupId)                                        sendBroadcast(allGroup)                                        //load lai danh sach group                                        sendBroadcast(Intent(Fragment_1_Home_SonTung.ACTION_REFRESH_GROUP))                                        finish()                                    }                                }                            }                        }                        override fun onFailure(call: Call<JsonObject?>, t: Throwable) {                            MyUtils.log("error")                        }                    })            } else {                MyUtils.showThongBao(this)            }        }    }    //////////////////////////////////////////////////////////////////////////////////////////////    private var postUtils: GroupCoverUtils? = null    fun initSelectImage() {        postUtils = GroupCoverUtils(this)        permissionCamera()    }    private val perms =        arrayOf(Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE)    private fun permissionCamera() {        PermissionX.init(this)            .permissions(*perms)            .onExplainRequestReason { scope, deniedList ->                scope.showRequestReasonDialog(                    deniedList,                    getString(R.string.deny_permission_notify),                    "OK",                    "Cancel"                )            }            .onForwardToSettings { scope, deniedList ->                scope.showForwardToSettingsDialog(                    deniedList,                    getString(R.string.deny_permission_notify),                    "OK",                    "Cancel"                )            }            .request { allGranted, grantedList, deniedList ->                if (allGranted) {                    TedImagePicker.with(this)                        .mediaType(MediaType.IMAGE)                        .dropDownAlbum()                        .start { uri -> uploadImage(uri) }                } else {                    MyUtils.showAlertDialog(this, R.string.deny_permission_notify, true)                }            }    }    fun uploadImage(uri: Uri) {        if (MyUtils.checkInternetConnection(context)) {            showDialogLoading()            val list = java.util.ArrayList<Uri>()            list.add(uri)            postUtils?.uploadImageToServer(groupInfo?.groupGUID, uri, object : UploadImageListener {                override fun onUploadImageSuccess(                    GUID: String?,                    itemContent: java.util.ArrayList<Item>?                ) {                    val item = itemContent?.get(0)                    val cover = item?.large?.link                    val small = item?.small?.link                    MyApplication.apiManager.updateCover(                        groupId,                        cover,                        small,                        object : Callback<JsonObject> {                            override fun onResponse(                                call: Call<JsonObject>,                                response: Response<JsonObject>                            ) {                                val obj = response.body()                                parseJson(obj.toString())                                hideDialogLoading()                            }                            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                                hideDialogLoading()                            }                        })                }            })        } else {            MyUtils.showThongBao(context)        }    }    //////////////////////////////////////////////////////////////////////////////////////////////    ////////////////////////////////////////////////////////////////////////////////////////////    private fun parseJson(response: String) {        if (!TextUtils.isEmpty(response)) {            val result = Webservices.parseJson(response, GroupInfo::class.java, false)            if (result != null) {                if (result.errorCode == ReturnResult.SUCCESS) {                    //upload thanh cong                    MyUtils.showToast(context, R.string.toast_upload_success)                    //refresh lai list home                    //load lai danh sach group                    sendBroadcast(Intent(Fragment_1_Home_SonTung.ACTION_REFRESH_GROUP))                    //doi banner                    //khi nhan cancel thi load lai group                    var group = result.data as GroupInfo                    groupInfo?.coverUrl = group.coverUrl                    groupInfo?.coverSmallUrl = group.coverSmallUrl                    //load lai cover                    loadCover(groupInfo?.coverUrl)                    //doi hinh trong danh sach tat ca nhom                    val intent = Intent(AllGroupActivity.ACTION_UPDATE_BANNER)                    intent.putExtra(GroupInfo.GROUP_INFO, groupInfo)                    sendBroadcast(intent)                }            }        }    }    //////////////////////////////////////////////////////////////////////////////////////////////    fun showDialogLoading() {        llProgressBar.visibility = View.VISIBLE    }    fun hideDialogLoading() {        llProgressBar.visibility = View.GONE    }    //////////////////////////////////////////////////////////////////////////////////////////////    private lateinit var broadcastReceiver: BroadcastReceiver    fun initReceiver() {        broadcastReceiver = object : BroadcastReceiver() {            override fun onReceive(context: Context?, intent: Intent?) {                when (intent?.action) {                    AllGroupActivity.ACTION_REPLACE_GROUP -> {                        val group = intent.getParcelableExtra<GroupInfo>(GroupInfo.GROUP_INFO)                        if (group != null) {                            groupInfo = group                            setUI()                        }                    }                    AllGroupActivity.ACTION_REMOVE_MEMBER -> {                        val groupId = intent.getLongExtra(GroupInfo.GROUP_ID, 0)                        if (groupId > 0) {                            if (groupInfo?.totalMember!! > 0) {                                groupInfo?.totalMember = groupInfo?.totalMember!! - 1                                setNumberMembers()                            }                        }                    }                    ACTION_REFRESH_DETAIL_GROUP -> {                        getFeedGroup(0)                    }                    ACTION_DELETE_POST_IN_GROUP -> {                        val imageItemId: Long = intent.getLongExtra(ImageItem.IMAGE_ITEM_ID, 0)                        if (imageItemId > 0) {                            getFeedGroup(0)                        }                    }                }            }        }        var filter = IntentFilter()        filter.addAction(AllGroupActivity.ACTION_REPLACE_GROUP)        filter.addAction(AllGroupActivity.ACTION_REMOVE_MEMBER)        filter.addAction(ACTION_REFRESH_DETAIL_GROUP)        filter.addAction(ACTION_DELETE_POST_IN_GROUP)        registerReceiver(broadcastReceiver, filter)    }    override fun onDestroy() {        super.onDestroy()        unregisterReceiver(broadcastReceiver)    }    //////////////////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////////////////    open fun drawableToBitmap(drawable: Drawable): Bitmap? {        var bitmap: Bitmap? = null        if (drawable is BitmapDrawable) {            val bitmapDrawable: BitmapDrawable = drawable as BitmapDrawable            if (bitmapDrawable.getBitmap() != null) {                return bitmapDrawable.getBitmap()            }        }        bitmap = if (drawable.intrinsicWidth <= 0 || drawable.intrinsicHeight <= 0) {            Bitmap.createBitmap(                1,                1,                Bitmap.Config.ARGB_8888            ) // Single color bitmap will be created of 1x1 pixel        } else {            Bitmap.createBitmap(                drawable.intrinsicWidth,                drawable.intrinsicHeight,                Bitmap.Config.ARGB_8888            )        }        val canvas = Canvas(bitmap)        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight())        drawable.draw(canvas)        return bitmap    }    @JvmName("setIconColor1")    fun setIconColor(color: Int) {        backIcon?.let { setColorFilter(it, color) }        drawbleStackOverflow?.let { setColorFilter(it, color) }    }    //////////////////////////////////////////////////////////////////////////////////////////////    fun initUIAddPost() {        if (groupInfo != null && groupInfo!!.isICanPost) {            linearAddPost.visibility = View.VISIBLE            linearAddPost.setOnClickListener {                val intent = Intent(this, PostLikeFacebookActivity::class.java)                intent.putExtra(GroupInfo.GROUP_ID, groupInfo!!.groupId)                startActivityForResult(intent, ACTION_POST_FEED)            }            if (user != null) {                val size = resources.getDimensionPixelSize(R.dimen.ic_size_36)                Glide.with(this)                    .load(user.avatarSmall)                    .override(size, size)                    .transform(CenterCrop(), RoundedCorners(size / 2))                    .into(imgAvatar)            }        } else {            linearAddPost.visibility = View.GONE        }    }    //////////////////////////////////////////////////////////////////////////////////////////////    private fun loadCover(coverUrl: String?) {        if (!coverUrl.isNullOrEmpty()) {            //hinh width = widthScreen, height = 1/2 width            val width = screentWidth            var height = imgHeight            if (height <= 0) {                height = width / 2                height = height + (height / 3)            }//            val param = LinearLayout.LayoutParams(width, height)//            toolbarImage.setLayoutParams(param)            Glide.with(this)                .load(coverUrl)                .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)                .override(width, height)                .into(toolbarImage)            //luu lai de lam min height cho cac anh sau            toolbarImage.post {                height = toolbarImage.height                if (height > 0) {                    db.putInt(GroupInfo.COVER_MIN_HEIGHT, height)                }            }            /*if (resource != null) {                var bitmap = drawableToBitmap(resource)                if (bitmap != null) {                    // creating the image that maintain aspect ratio with width of image is set to screenwidth.                    val width: Int = screentWidth                    val diw: Int = bitmap.width                    if (diw > 0) {                        var height = 0                        height = width * bitmap.height / diw                        bitmap = Bitmap.createScaledBitmap(bitmap, width, height, false)                        val param = LinearLayout.LayoutParams(width, height)                        toolbarImage.setLayoutParams(param)                    }                    toolbarImage.setImageBitmap(bitmap)                }            }*/        }    }    //////////////////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////////////////    //////////////////////////////////////////////////////////////////////////////////////////////}